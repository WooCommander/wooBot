import asyncio
import json
import os
import logging
from playwright.async_api import async_playwright
from telegram import Bot
from telegram.constants import ParseMode

# üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '7752409637:AAGyOahq728RyWlIqYR_8aKZ26IFhFo8asA'  # –ø—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω!
ADMIN_ID = '502969715'  # –ø—Ä–æ–≤–µ—Ä—å ID
LINKS_FILE = 'known_links.json'
FILTERS_FILE = 'filters.json'
URL = "https://makler.md/ru/real-estate/real-estate-for-sale/houses-for-sale?list¬Æion[]=3&city[]=1112&city[]=1113&city[]=2&city[]=1248&city[]=4&city[]=3129&city[]=2597&city[]=5&city[]=41&city[]=43&city[]=1250&city[]=3465&city[]=1519&city[]=1249&city[]=1251¬§cy_id=5&list=detail"

# ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    filename="makler_bot.log",
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s"
)

bot = Bot(token=TOKEN)

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
def load_filters():
    if os.path.exists(FILTERS_FILE):
        try:
            with open(FILTERS_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            logging.error("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω filters.json, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    return {'max_price': 30000, 'city': ['–¢–∏—Ä–∞—Å–ø–æ–ª—å', 'Tiraspol']}

FILTERS = load_filters()

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def load_known_links():
    if os.path.exists(LINKS_FILE):
        try:
            with open(LINKS_FILE, 'r') as f:
                return set(json.load(f))
        except json.JSONDecodeError:
            logging.error("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω known_links.json, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ")
            return set()
    return set()

def save_known_links(links):
    with open(LINKS_FILE, 'w') as f:
        json.dump(list(links), f)

known_links = load_known_links()

# ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_inner_text(article, selector):
    el = await article.query_selector(selector)
    return await el.inner_text() if el else ''

async def get_attr(article, selector, attr):
    el = await article.query_selector(selector)
    return await el.get_attribute(attr) if el else ''

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
async def check_makler():
    logging.info("–ó–∞–ø—É—Å–∫ check_makler")
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()
        try:
            logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {URL}")
            await page.goto(URL, wait_until='networkidle', timeout=60000)
            await auto_scroll(page)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            await browser.close()
            return

        articles = await page.query_selector_all('article')
        logging.info(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(articles)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

        for article in articles:
            img = await get_attr(article, 'img', 'src')
            title = await get_inner_text(article, '.ls-detail_anUrl span')
            price = await get_inner_text(article, '.ls-detail_price')
            date = await get_inner_text(article, '.ls-detail_time')
            city = await get_inner_text(article, '#pointer_icon')
            phone = await get_inner_text(article, '.phone_icon')
            desc = await get_inner_text(article, '.subfir')
            href = await get_attr(article, '.ls-detail_anUrl', 'href')
            link = f'https://makler.md{href}' if href else ''

            logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: title={title}, price={price}, city={city}, link={link}, img={img}")

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            try:
                price_value = float(''.join(filter(str.isdigit, price.replace(',', ''))))
                if price_value > FILTERS['max_price']:
                    logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: —Ü–µ–Ω–∞ {price_value} –≤—ã—à–µ {FILTERS['max_price']}")
                    continue
            except ValueError:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É: {price}")
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
            if not any(city_name.lower() in city.lower() for city_name in FILTERS['city']):
                logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –≥–æ—Ä–æ–¥ {city} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ {FILTERS['city']}")
                continue

            if not link:
                logging.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                continue
            if link in known_links:
                logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ - {link}")
                continue

            known_links.add(link)
            save_known_links(known_links)

            message = f"""
üè° *{title}*
üí∞ {price}
üìç {city}
üìû {phone}
üìÖ {date}
üìù {desc}
üîó [–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({link})
            """.strip()

            logging.info(f'üì¨ –û—Ç–ø—Ä–∞–≤–ª—è—é: {title}')
            try:
                await bot.send_message(chat_id=ADMIN_ID, text=message, parse_mode=ParseMode.MARKDOWN)
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

        await browser.close()

async def auto_scroll(page):
    previous_height = await page.evaluate("() => document.body.scrollHeight")
    while True:
        await page.evaluate("() => window.scrollBy(0, window.innerHeight)")
        await asyncio.sleep(1)
        new_height = await page.evaluate("() => document.body.scrollHeight")
        if new_height == previous_height:
            break
        previous_height = new_height

# ‚úÖ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    while True:
        try:
            await check_makler()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        await asyncio.sleep(60)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    asyncio.run(main())